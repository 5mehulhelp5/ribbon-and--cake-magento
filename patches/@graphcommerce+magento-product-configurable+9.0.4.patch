diff --git a/node_modules/@graphcommerce/magento-product-configurable/SwatchList.tsx b/node_modules/@graphcommerce/magento-product-configurable/SwatchList.tsx
index 3032ee5..6fbdca8 100644
--- a/node_modules/@graphcommerce/magento-product-configurable/SwatchList.tsx
+++ b/node_modules/@graphcommerce/magento-product-configurable/SwatchList.tsx
@@ -24,6 +24,7 @@ export function SwatchList(props: SwatchListProps) {
     configurable_options?.filter((option) => attributes.includes(option?.attribute_code ?? '')) ??
     []
 
+  
   return (
     <>
       {options.map((option) => (
diff --git a/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOption.tsx b/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOption.tsx
index 0482241..e01bca1 100644
--- a/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOption.tsx
+++ b/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOption.tsx
@@ -14,6 +14,7 @@ import type {
   ConfigurableOptionValue,
   ConfigurableOptionValueFragment,
 } from '../ConfigurableOptionValue'
+import { useEffect } from 'react'
 
 export type ConfigurableProductOptionProps = NonNullable<
   NonNullable<ConfigurableOptionsFragment['configurable_options']>[number]
@@ -43,7 +44,10 @@ export function ConfigurableProductOption(props: ConfigurableProductOptionProps)
   } = props
   const fieldName = `cartItems.${index}.selected_options.${optionIndex}` as const
 
-  const { control } = useFormAddProductsToCart()
+  const splittedLabel = label?.split(' ')?.[1]
+  
+
+  const { control,setValue } = useFormAddProductsToCart()
 
   const selectedOption = useWatch({ control, name: fieldName })
 
@@ -57,6 +61,8 @@ export function ConfigurableProductOption(props: ConfigurableProductOptionProps)
 
   const { configured } = useConfigurableOptionsForSelection({ url_key, selectedOptions })
 
+ 
+
   const available =
     configured?.configurable_product_options_selection?.options_available_for_selection?.find(
       (o) => o?.attribute_code === attribute_code,
@@ -68,15 +74,42 @@ export function ConfigurableProductOption(props: ConfigurableProductOptionProps)
     disabled: !(!available || available.includes(ov.uid)),
   }))
 
+    useEffect(() => {
+    // Check if a value for this field is already selected
+    if (!selectedOption) {
+      // Find the first item that is not disabled
+      const firstAvailableItem = items.find((item) => !item.disabled);
+      
+      // If a valid item exists, set it as the default value in the form
+      if (firstAvailableItem) {
+        setValue(fieldName, firstAvailableItem.value);
+      }
+    }
+  }, [items, selectedOption, fieldName, setValue]);
+
   if (!values) return null
 
   return (
     <Box key={fieldName} sx={[...(Array.isArray(sx) ? sx : [sx])]}>
-      <SectionHeader
-        labelLeft={optionStartLabels?.[attribute_code ?? ''] ?? label}
+
+      {label ==='Weight' && (
+   <SectionHeader
+   labelLeft={
+    label ==='Weight'
+      ? 'Weight'
+      : undefined 
+  }
         labelRight={optionEndLabels?.[attribute_code ?? '']}
-        sx={{ mt: 0 }}
+        sx={{ mt: 0 , '& .SectionHeader-left':{
+          color:'#000',
+          fontSize: { xs:'15px', md: '16px' },
+          fontWeight:500,
+          lineHeight:'120%',
+          textTransform:'capitalize'
+        }}}
       />
+      )}
+   
 
       <ActionCardListForm<
         ActionCardItemBase & ConfigurableOptionValueFragment,
@@ -92,7 +125,43 @@ export function ConfigurableProductOption(props: ConfigurableProductOptionProps)
         rules={{
           required: i18n._(/* i18n*/ 'Please select a value for ‘{label}’', { label }),
         }}
+        sx={{
+          borderRadius:'8px',
+          outline:'none',
+          boxShadow:'none',
+          textTransform:'capitalize',
+          fontSize:{xs:'15px',md:'16px'},
+          fontWeight:400,
+         '& .ActionCard-root.variantOutlined':{
+          border:'1px solid #F6DBE0',
+          boxShadow:'none',
+         },
+         '& .MuiTouchRipple-root': {
+        display: 'none', 
+      },
+      '& .ActionCard-root .variantOutlined':{
+        boxShadow:'none !important'
+      },
+         '& .ActionCard-root.variantOutlined.selected':{
+          border:'1px solid #441E14',
+          outline:'none', boxShadow:'none',
+          backgroundColor:'#F6DBE0',  
+          // fontWeight:500,
+          // '& .ActionCard-title.selected':{
+          //   fontWeight:500
+          // }
+         },
+          '& .ActionCard-root.variantOutlined.selected:focus':{
+          border:'1px solid #441E14',
+          outline:'none', boxShadow:'none',
+         },
+         '& .ActionCard-root.variantOutlined:focus':{
+          outline:'none', boxShadow:'none',
+         },
+        }}
       />
     </Box>
   )
 }
+
+
diff --git a/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOptions.tsx b/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOptions.tsx
index d17ad07..05bd97c 100644
--- a/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOptions.tsx
+++ b/node_modules/@graphcommerce/magento-product-configurable/components/ConfigurableProductOptions/ConfigurableProductOptions.tsx
@@ -54,6 +54,8 @@ export function ConfigurableProductOptions(props: ConfigurableProductOptionsProp
     return formatter.format(options.map((o) => o.label))
   }, [locale, options])
 
+
+
   useEffect(() => {
     if (unavailable) {
       setError(`cartItems.${index}.sku`, {
@@ -62,7 +64,6 @@ export function ConfigurableProductOptions(props: ConfigurableProductOptionsProp
     }
     if (!unavailable) clearErrors(`cartItems.${index}.sku`)
   }, [allLabels, clearErrors, index, setError, unavailable])
-
   return (
     <Box sx={(theme) => ({ display: 'grid', rowGap: theme.spacings.sm })}>
       {options.map((option, optionIndex) => (
